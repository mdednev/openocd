# SPDX-License-Identifier: GPL-2.0-or-later

# Script for K1986VK025 (MDR32F02FI) and MDR1206FI IDs 215,217
# RISC-V MCU based on CloudBear BM-310S core

# Work-area is a space in RAM used for flash programming
if { [info exists WORKAREASIZE] } {
    set _WORKAREASIZE $WORKAREASIZE
} else {
    set _WORKAREASIZE 0x10000
}

set _CHIPNAME mdr_rv
jtag newtap $_CHIPNAME cpu -irlen 5 -expected-id 0x000006df
set _TARGETNAME $_CHIPNAME.cpu

# Create and define default values for target, based on K1986VK025 specification
# Note: working area physical address will be modified while MDR1206FI MCU probing
# after reset
target create $_TARGETNAME riscv   \
    -chain-position $_TARGETNAME   \
    -work-area-phys 0x80000000     \
    -work-area-size $_WORKAREASIZE \
    -work-area-backup 0

# Get CHIP_ID value of MDR1206FI
proc mdr_get_chip_id {} {
    set MDR_PER2_CLOCK 0x5002001C
    set per2_clock [read_memory $MDR_PER2_CLOCK 32 1];               # Save original MDR_PER2_CLOCK value
    if {! ($per2_clock & 0x10)} {;                                   # Check RST_CLK bit is asserted in MDR_PER2_CLOCK
        return 0
    }
    write_memory $MDR_PER2_CLOCK 32 [expr {$per2_clock | (1 << 3)}]; # Enable FLASH clock
    set chip_id_ctrl [read_memory 0x50018018 32 1];                  # FLASH.CHIP_ID_CTRL
    set chip_id [expr {($chip_id_ctrl >> 2) & 0xFF}];                # Extract CHIP_ID value
    write_memory $MDR_PER2_CLOCK 32 $per2_clock;                     # Restore MDR_PER2_CLOCK value
    return $chip_id
}

proc mdr_setup_mcu {target_name} {
    global _MDR_HSITRIM

    poll

    if {! [string equal halted [$target_name curstate]]} {
        echo "Milandr MCU not halted, skipping clocks initialization."
        return
    }

    if {! [catch {set chip_id [mdr_get_chip_id]} err] && \
          ($chip_id == 215 || $chip_id == 217)} {
        if {$chip_id == 217} {
            echo "Detected MDR1206FI with (CHIP_ID = $chip_id)"
            set MDR_HSI_TRIM   0x00023FF4; # TRIM HSI value address in user flash memory
        } else {
            echo "Detected MDR1206AFI (CHIP_ID = $chip_id)"
            set MDR_HSI_TRIM   0x00023BF4; # TRIM HSI value address in user flash memory
        }
        set MDR_CPU_CLOCK  0x5002000C
        set MDR_PER2_CLOCK 0x5002001C
        set MDR_BKP_WPR    0x50060000
        set MDR_BKP_CLK    0x50060008

        # Set proper working area start address
        $target_name configure -work-area-phys 0x40000000
    } else {
        set MDR_HSI_TRIM   0x00023FF8; # HSI TRIM address value in OTP
        set MDR_CPU_CLOCK  0x4002000C
        set MDR_PER2_CLOCK 0x4002001C
        set MDR_BKP_WPR    0x40060000
        set MDR_BKP_CLK    0x40060008

        echo "Detected MDR32F02FI MCU"

        # Set proper working area start address
        $target_name configure -work-area-phys 0x80000000
    }

    if {[info exists _MDR_HSITRIM]} {
        set hsi_trim $_MDR_HSITRIM
        echo "Using HSI TRIM override = 0x"[format "%02X" $_MDR_HSITRIM]
    } else {
        set hsi_trim [read_memory $MDR_HSI_TRIM 8 1]; # Read HSI TRIM value from flash
        echo "Using MCU HSI TRIM = 0x"[format "%02X" $hsi_trim]
    }
    set hsi_trim [expr {$hsi_trim & 0x3F}]; # Get proper HSI value

    set per2_clock [read_memory $MDR_PER2_CLOCK 32 1];              # RST_CLK.MDR_PER2_CLOCK
    write_memory $MDR_PER2_CLOCK 32 [expr {$per2_clock | (1<<12)}]; # Enable BKP clock
    write_memory $MDR_BKP_WPR 32 0x8555AAA1;                        # Set key to MDR_BKP_WPR
    set bkp_clk [read_memory $MDR_BKP_CLK 32 1];                    # Get MDR_BKP_CLK value
    set bkp_clk [expr {$bkp_clk & ~(0x3F<<15)}];                    # Clear hsitrim field value
    set bkp_clk [expr {$bkp_clk | ($hsi_trim<<15)}];                # Set hsitrim field value
    write_memory $MDR_BKP_CLK 32 $bkp_clk;                          # Set MDR_BKP_CLK.hsitrim
    write_memory $MDR_BKP_WPR 32 0x0;                               # Reset key in MDR_BKP_WPR
    write_memory $MDR_PER2_CLOCK 32 $per2_clock;                    # Restore RST_CLK.MDR_PER2_CLOCK
    write_memory $MDR_CPU_CLOCK 32 0x00000100;                      # HCLK=CPU_C3=CPU_C2=CPU_C1=HSI (8 MHz)

    adapter speed 4000
}

$_TARGETNAME configure -event reset-start {adapter speed 250}
$_TARGETNAME configure -event reset-end   [subst {mdr_setup_mcu $_TARGETNAME}]

# Setup default values for banks, based on K1986VK025 specification
# Will be modified in mdr_probe function during bank initialization
flash bank $_CHIPNAME.main mdr 0x10000000 0x00040000 0 0 $_TARGETNAME 0 1 64; #type=0 (main), bank_count=1 (256K), sector=64 (4K)
flash bank $_CHIPNAME.info mdr 0x00000000 0x00002000 0 0 $_TARGETNAME 1 1  2; #type=1 (info), bank_count=1 (8K), sectors=2 (4K)

# vim: syntax=tcl filetype=tcl ts=4 sts=4 sw=4 et
